# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: {{ name }}
on:
  push:
    branches:
    - main
    paths:
    - '{{ path }}/**'
    - '.github/workflows/{{ name }}.yaml'
  pull_request:
    paths:
    - '{{ path }}/**'
    - '.github/workflows/{{ name }}.yaml'
  pull_request_target:
    types: [labeled]
    paths:
    - '{{ path }}/**'
    - '.github/workflows/{{ name }}.yaml'
  schedule:
  - cron:  '0 0 * * 0'
jobs:
  test:
    if: github.event.action != 'labeled' || github.event.label.name == 'actions:force-run'
    runs-on: ubuntu-latest
    timeout-minutes: 120
    permissions:
      contents: 'read'
      id-token: 'write'
    defaults:
      run:
        working-directory: '{{ path }}'
    steps:
    - uses: actions/checkout@v3.5.3
      with:
        ref: ${% raw %}{{github.event.pull_request.head.sha}}{% endraw %}
    - uses: 'google-github-actions/auth@v1.1.1'
      with:
        workload_identity_provider: 'projects/1046198160504/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions-provider'
        service_account: 'kokoro-system-test@long-door-651.iam.gserviceaccount.com'
        create_credentials_file: 'true'
        access_token_lifetime: 600s
    - id: secrets
      uses: 'google-github-actions/get-secretmanager-secrets@v1'
      with:
        secrets: |-
          # TODO: Update secrets
          secret_key_1:nodejs-docs-samples-tests/secret-1
          secret_key_2:nodejs-docs-samples-tests/secret-2
    - uses: actions/setup-node@v3.6.0
      with:
        node-version: 16
    - name: Get npm cache directory
      id: npm-cache-dir
      shell: bash
      run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}        
    - uses: actions/cache@v3
      id: npm-cache
      with:
        path: ${% raw %}{{ steps.npm-cache-dir.outputs.dir }}{% endraw %}
        key: ${% raw %}{{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}{% endraw %}
        restore-keys: |
          ${% raw %}{{ runner.os }}-node-{% endraw %}   
    - name: install repo dependencies
      run: npm install
      working-directory: .
    - name: install directory dependencies
      run: npm install
    - run: npm run build --if-present
    - name: set env vars for scheduled run
      if: github.event.action == 'schedule'
      run: |
        echo "MOCHA_REPORTER_SUITENAME={{ name }}" >> $GITHUB_ENV
        echo "MOCHA_REPORTER_OUTPUT=${% raw %}{{github.run_id}}{% endraw %}_sponge_log.xml" >> $GITHUB_ENV
        echo "MOCHA_REPORTER=xunit" >> $GITHUB_ENV
    - run: npm test
      env:
        # TODO: Update environment variables
        SECRET_1: ${% raw %}{{ steps.secrets.outputs.secret_key_1 }}{% endraw %}
        SECRET_2: ${% raw %}{{ steps.secrets.outputs.secret_key_2 }}{% endraw %}
    - name: upload test results for FlakyBot workflow
      if: github.event.action == 'schedule' && always()
      uses: actions/upload-artifact@v3
      env:
        MOCHA_REPORTER_OUTPUT: "${{github.run_id}}_sponge_log.xml"
      with:
        name: test-results
        path: {{ path }}/${% raw %}{{ env.MOCHA_REPORTER_OUTPUT }}{% endraw %}
        retention-days: 1        
  flakybot:
    permissions:
      contents: 'read'
      id-token: 'write'
    if: github.event_name == 'schedule' && always() # always() submits logs even if tests fail
    uses: ./.github/workflows/flakybot.yaml
    needs: [test]
